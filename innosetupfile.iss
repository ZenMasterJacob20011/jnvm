; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "JNVM"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "me"
#define MyAppURL "www.me.com"
#define MyAppExeName "jnvm.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{E386E5DF-72EB-47F2-9774-EBD2011E7896}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={localappdata}\jnvm
UninstallDisplayIcon={app}\{#MyAppExeName}
; "ArchitecturesAllowed=x64compatible" specifies that Setup cannot run
; on anything but x64 and Windows 11 on Arm.
ArchitecturesAllowed=x64compatible
; "ArchitecturesInstallIn64BitMode=x64compatible" requests that the
; install be done in "64-bit mode" on x64 or Windows 11 on Arm,
; meaning it should use the native 64-bit Program Files directory and
; the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64compatible
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
DisableDirPage=no
; Uncomment the following line to run in non administrative install mode (install for current user only).
;PrivilegesRequired=lowest
OutputDir=.
OutputBaseFilename=jnvm-setup
SolidCompression=yes
WizardStyle=modern
ChangesEnvironment=yes
[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: ".\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Code]
const EnvironmentKey = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';

var
  ActiveVersionLocationPage: TInputDirWizardPage;
  lastSixLines: String;
  ActiveVersionTmp: String;
procedure EnvAddPath(Path: string);
var
  Paths: String;
begin
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE, EnvironmentKey, 'Path', Paths)
  then
    Paths := '';
  if Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';') > 0 then Exit;
  
  Paths := Paths + ';' + Path + ';'
  if RegWriteStringValue(HKEY_LOCAL_MACHINE, EnvironmentKey, 'Path', Paths)
  then Log(Format('The [%s] added to Path: [%s]', [Path, Paths]))
  else Log(Format('Error while adding the [%s] to Path: [%s]', [Path, Paths]));
end;
procedure EditChange(Sender: TObject);
begin
  lastSixLines := Copy(ActiveVersionLocationPage.Values[0], Length(ActiveVersionLocationPage.Values[0])-5, 6);
  if lastSixLines <> 'nodejs' then
  begin
    ActiveVersionTmp := ActiveVersionLocationPage.Values[0] + '\nodejs';
    ActiveVersionLocationPage.Values[0] := ActiveVersionTmp;
  end;
end;
procedure InitializeWizard;
begin
  ActiveVersionLocationPage := CreateInputDirPage(wpSelectDir, 'Active Version Location', 
  'The active version of Node.js will always be available at this location', 
  'Select the folder in which Setup should create the symlink, then click Next.', True, 'nodejs');
  ActiveVersionLocationPage.Add('This directory will automatically be added to your system path.');
  ActiveVersionLocationPage.Values[0] := ExpandConstant('{sd}\jnvm4w\nodejs');
  ActiveVersionLocationPage.Edits[0].OnChange := @EditChange;
end;
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep=ssPostInstall then
    begin
    SaveStringsToFile(ExpandConstant('{app}\settings.txt'), [ExpandConstant('root: {app}'), 'path: ' + ActiveVersionLocationPage.Values[0]], False);
    EnvAddPath(ExpandConstant('{app}'));
    EnvAddPath(ExpandConstant(ActiveVersionLocationPage.Values[0]));
    end;
end;
